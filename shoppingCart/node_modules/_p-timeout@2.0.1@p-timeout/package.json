{
  "_from": "p-timeout@2.0.1",
  "_id": "p-timeout@2.0.1",
  "_inBundle": false,
  "_location": "/vue-resource/got/p-timeout",
  "_phantomChildren": {},
  "_requiredBy": [
    "/vue-resource/got"
  ],
  "_resolved": "http://registry.npm.taobao.org/p-timeout/download/p-timeout-2.0.1.tgz",
  "_shrinkwrap": null,
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/p-timeout/issues"
  },
  "dependencies": {
    "p-finally": "^1.0.0"
  },
  "description": "Timeout a promise after a specified amount of time",
  "devDependencies": {
    "ava": "*",
    "delay": "^2.0.0",
    "p-cancelable": "^0.3.0",
    "xo": "*"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sindresorhus/p-timeout#readme",
  "keywords": [
    "promise",
    "timeout",
    "error",
    "invalidate",
    "async",
    "await",
    "promises",
    "time",
    "out",
    "cancel",
    "bluebird"
  ],
  "license": "MIT",
  "name": "p-timeout",
  "optionalDependencies": {},
  "readme": "# p-timeout [![Build Status](https://travis-ci.org/sindresorhus/p-timeout.svg?branch=master)](https://travis-ci.org/sindresorhus/p-timeout)\n\n> Timeout a promise after a specified amount of time\n\n\n## Install\n\n```\n$ npm install p-timeout\n```\n\n\n## Usage\n\n```js\nconst delay = require('delay');\nconst pTimeout = require('p-timeout');\n\nconst delayedPromise = delay(200);\n\npTimeout(delayedPromise, 50).then(() => 'foo');\n//=> [TimeoutError: Promise timed out after 50 milliseconds]\n```\n\n\n## API\n\n### pTimeout(input, ms, [message | fallback])\n\nReturns a decorated `input` that times out after `ms` time.\n\nIf you pass in a cancelable promise, specifically a promise with a `.cancel()` method, that method will be called when the `pTimeout` promise times out.\n\n#### input\n\nType: `Promise`\n\nPromise to decorate.\n\n#### ms\n\nType: `number`\n\nMilliseconds before timing out.\n\n#### message\n\nType: `string` `Error`<br>\nDefault: `'Promise timed out after 50 milliseconds'`\n\nSpecify a custom error message or error.\n\nIf you do a custom error, it's recommended to sub-class `pTimeout.TimeoutError`.\n\n#### fallback\n\nType: `Function`\n\nDo something other than rejecting with an error on timeout.\n\nYou could for example retry:\n\n```js\nconst delay = require('delay');\nconst pTimeout = require('p-timeout');\n\nconst delayedPromise = () => delay(200);\n\npTimeout(delayedPromise(), 50, () => {\n\treturn pTimeout(delayedPromise(), 300);\n});\n```\n\n### pTimeout.TimeoutError\n\nExposed for instance checking and sub-classing.\n\n\n## Related\n\n- [delay](https://github.com/sindresorhus/delay) - Delay a promise a specified amount of time\n- [p-min-delay](https://github.com/sindresorhus/p-min-delay) - Delay a promise a minimum amount of time\n- [p-retry](https://github.com/sindresorhus/p-retry) - Retry a promise-returning function\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/p-timeout.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "2.0.1"
}
